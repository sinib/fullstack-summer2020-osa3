{"version":3,"sources":["components/Contacts.js","components/Forms.js","components/Notifications.js","services/persons.js","App.js","index.js"],"names":["Person","props","name","number","value","id","onClick","remover","Contacts","list","map","person","key","Input","onChange","Button","type","text","Form","action","onSubmit","inputs","input","buttons","button","Notification","msgData","msg","isError","className","dbUrl","axios","get","then","response","data","newGuy","post","delete","put","SubHeader","title","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","nameSearch","setSearch","message","setMessage","useEffect","contactService","contacts","shownContacts","filter","toLowerCase","includes","event","target","preventDefault","comparison","find","guy","undefined","addedGuy","concat","setTimeout","window","confirm","updatedGuy","catch","error","toBeDeleted","Number","removed","findIndex","removedName","newPersons","slice","updateRemoved","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f17c84f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = (props) =>{\r\n  return(\r\n  <p>\r\n    {props.name}&nbsp;\r\n    {props.number}&nbsp;\r\n    <button value={props.id} onClick={props.remover}>Delete</button>\r\n  </p>\r\n  )\r\n}\r\n    \r\nconst Contacts = (props) =>\r\n    props.list.map(person => <Person key={person.id} id ={person.id} name={person.name} number={person.number} remover = {props.remover}/>)\r\n\r\nexport default Contacts","import React from 'react'\r\n\r\nconst Input = (props) =>\r\n    <>\r\n    {props.name}: <input value={props.value} onChange={props.onChange}/>\r\n    </>\r\n\r\nconst Button = (props) =>\r\n<button type={props.type}>{props.text}</button>\r\n\r\n// Builds forms from given input, button, and onSubmit -props\r\nconst Form = (props) =>{\r\n    let action\r\n    if (props.onSubmit === ''){\r\n        action = () => {return}\r\n    }\r\n    else{\r\n        action = props.onSubmit\r\n    }\r\n    return(\r\n    <form onSubmit={action}>\r\n          <div>\r\n            {props.inputs.map(input => <p key={input.id}><Input name={input.name} value={input.value} onChange={input.onChange}/></p>)}\r\n          </div>\r\n          <div>\r\n            {props.buttons.map(button => <Button key={button.id} type={button.type} text={button.text}/>)}\r\n          </div>\r\n        </form>\r\n    )\r\n}\r\n    \r\n\r\nexport default Form ","import React from 'react'\r\n\r\n// Renders error- and notification messages\r\nconst Notification = ({msgData}) => {\r\n    const msg = msgData[0]\r\n    const isError = msgData[1]\r\n\r\n    if (msg === null){\r\n        return null\r\n    }\r\n\r\n    else {\r\n        return <div className={isError ? \"error\" : \"notification\"}>\r\n                {msg}\r\n                </div>\r\n    }\r\n\r\n  }\r\n\r\n  export default Notification","import axios from 'axios'\r\n\r\nconst dbUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(dbUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst add = newGuy => {\r\n    const request = axios.post(dbUrl, newGuy)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  const request = axios.delete(`${dbUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newGuy) => {\r\n  const request = axios.put(`${dbUrl}/${id}`, newGuy)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default { \r\n  getAll, add, remove, update  \r\n}","import React, { useState, useEffect } from 'react'\r\nimport Contacts from './components/Contacts'\r\nimport Form from './components/Forms'\r\nimport Notification from './components/Notifications'\r\nimport contactService from './services/persons'\r\nimport './index.css'\r\n\r\nconst SubHeader = ({title}) =>\r\n    <h2>{title}</h2>\r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([])\r\n\r\n    const [ newName, setNewName ] = useState('')\r\n\r\n    const [ newNumber, setNewNumber ] = useState('')\r\n\r\n    const [ nameSearch, setSearch ] = useState('')\r\n\r\n    const [ message, setMessage ] = useState([null,false])\r\n\r\n    // Effect that fetches the contacts from the database\r\n    const fetchHook = () => {\r\n        contactService\r\n          .getAll()\r\n          .then(contacts => {\r\n            setPersons(contacts)\r\n          })\r\n      }\r\n\r\n    useEffect(fetchHook, [])\r\n\r\n    // These three update the input render in the fields\r\n    const nameInput = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const numberInput = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const searchInput = (event) => {\r\n        setSearch(event.target.value)\r\n    }\r\n\r\n    // Handles the submitting of a new contact\r\n    const formHandler = (event) => {\r\n        event.preventDefault()\r\n        const newGuy={name:newName, number:newNumber}\r\n        // Checks if the person is already in contacts\r\n        const comparison = persons.find(guy=>guy.name === newName)\r\n        if (comparison === undefined){\r\n            // Add if a new contact\r\n            contactService    \r\n            .add(newGuy)    \r\n            .then(addedGuy => {      \r\n                setPersons(persons.concat(addedGuy))\r\n                // Empty input fields\r\n                setNewName('')\r\n                setNewNumber('')\r\n                // Show successful addition message\r\n                setMessage([`${addedGuy.name} was added`,false])        \r\n                setTimeout(() => {          \r\n                    setMessage([null,false])        \r\n                }, 5000)\r\n            })\r\n            \r\n        }\r\n        else {\r\n            // Update if an existing contact (and the permission is given)\r\n            if(window.confirm(`${comparison.name} is already in the phonebook. Do you want to replace the number?`)){\r\n                contactService\r\n                .update(comparison.id, newGuy)\r\n                .then(updatedGuy => {      \r\n                    setPersons(persons.map(guy => guy.id !== comparison.id ? guy : updatedGuy))\r\n                    // Empty input fields\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    // Show successful update message\r\n                    setMessage([`Updated the number for ${updatedGuy.name}`,false])        \r\n                    setTimeout(() => {          \r\n                    setMessage([null,false])        \r\n                }, 5000)\r\n                })\r\n                // Show an error message if the contact to be updated has already been removed from the server\r\n                .catch(error => {\r\n                    setMessage([`${comparison.name} has already been removed from contacts.`,true])        \r\n                    setTimeout(() => {          \r\n                    setMessage([null,false])        \r\n                }, 5000)\r\n                }\r\n\r\n                )\r\n            } \r\n        }\r\n    }\r\n\r\n    // Updates the contacts to be rendered after a removal of a contact\r\n    const updateRemoved = (id) => {\r\n        const removed = persons.findIndex((person) => person.id === Number(id))\r\n        const removedName = persons[removed].name\r\n        const newPersons = persons.slice(0,removed).concat(persons.slice(removed+1))\r\n        setPersons(newPersons)\r\n        // Show successful removal message\r\n        setMessage([`Removed ${removedName} from contacts.`,false])        \r\n                setTimeout(() => {          \r\n                    setMessage([null,false])        \r\n                }, 5000)\r\n\r\n    }\r\n\r\n    // Handles the removal of a contact from the database\r\n    const remove = (event) => {\r\n        const id = event.target.value\r\n        const toBeDeleted = persons.find(person =>person.id === Number(id))\r\n        if(window.confirm(`Do you really want to delete ${toBeDeleted.name}?`)){\r\n            contactService\r\n            .remove(id)\r\n            .then(\r\n                updateRemoved(id)\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    // Decides which contacts to show depending on the search input\r\n    const shownContacts = nameSearch === '' \r\n        ? persons \r\n        : persons.filter(person => person.name.toLowerCase().includes(nameSearch.toLowerCase()))\r\n\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n\r\n        <SubHeader title=\"Search contacts\"/>\r\n\r\n        <Form   inputs={[\r\n                        {id:1, name:'Name', value:nameSearch, onChange:searchInput}\r\n                        ]} \r\n                buttons={[]}\r\n                onSubmit=''/>\r\n\r\n        <SubHeader title=\"Add new contact\"/>\r\n\r\n        <Notification msgData = {message}/>\r\n\r\n        <Form   inputs={[\r\n                        {id:2, name:'Name', value:newName, onChange:nameInput}, \r\n                        {id:3, name:'Number', value:newNumber, onChange:numberInput}\r\n                        ]} \r\n                buttons={[\r\n                        {id:1, type:'submit', text:'Add'}\r\n                        ]}\r\n                onSubmit={formHandler}/>\r\n\r\n        <SubHeader title=\"Contacts\"/>\r\n        <Contacts list={shownContacts} remover = {remove}/>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}